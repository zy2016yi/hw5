function [out,revertclass] = tofloat(input)

identity = @(x) x;
tosingle = @im2single;

table = {'uint8', tosingle, @im2unit8
    'uint16', tosingle ,@im2unit16
    'int16', tosingle, @im2int16
    'logical', tosingle, @logical
    'double', identity, identity
    'single', identity, identity};

classIndex = find(strcmp(class(input), table(:,1)));

if isempty(classIndex)
   error('Unsupported input image class.');
end

out = table{classIndex, 2}(input);

revertclass = table{classIndex, 3};

function PQ = paddedsize(AB,CD,PARAM)  

if nargin == 1  
    PQ = 2*AB;  
elseif nargin ==2 && ~ischar(CD)  
    PQ = AB +CD -1;  
    PQ = 2*ceil(PQ/2);  
elseif nargin == 2  
    m = max(AB);%maximum dimension  

    %Find power-of-2 at least twice m.  
    P = 2^nextpow2(2*m);  
    PQ = [P,P];  
elseif (nargin == 3)&& strcmpi(PARAM,'pwr2')  
    m = max([AB CD]);%maximum dimension  
    P = 2^nextpow(2*m);  
    PQ = [P,P];  
else   
    error('Wrong number of inputs');  

end 


function [g,pubi]= dftfilt(f,H)
[f,revertclass]=tofloat(f);
PQ1 = paddedsize(size(f));
F=fft2(f,PQ1(1),PQ1(2));
G=H.*F;
% g=ifftshift(G);
g=ifft2(G);
g=g(1:size(f,1),1:size(f,2));

i1=0;i2=0;
for u=1:size(f,1)
    for v=1:size(f,2)
        L1=(abs(G(u,v)))^2;
        i1=i1+L1;
        L2=(abs(F(u,v)))^2;
        i2=i2+L2;
    end
end

pubi=L1/L2

end

function [ U,V ] = dftuv( M, N )
%DFTUV 实现频域滤波器的网格函数
%   Detailed explanation goes here
u = single(0:(M - 1));
v = single(0:(N - 1));
idx = find(u > M/2); %找大于M/2的数据
u(idx) = u(idx) - M; %将大于M/2的数据减去M
idy = find(v > N/2);
v(idy) = v(idy) - N;
[V, U] = meshgrid(v, u);      

end

function H = lpfilter( type,M,N,D0,n )
%LPFILTER creates the transfer function of a lowpass filter.
%   Detailed explanation goes here

%use function dftuv to set up the meshgrid arrays needed for computing 
%the required distances.
[U, V] = dftuv(M,N);
 
%compute the distances D(U,V)
D =hypot(U,V);

%begin filter computations
switch type
    case 'ideal'
        H = single(D <= D0);
    case 'btw'
        if nargin == 4
            n = 1;
        end
        H = 1./(1+(D./D0).^(2*n));
    case 'gaussian'
        H = exp(-(D.^2)./(2*(D0^2)));
    otherwise 
        error('Unkown filter type');

end

function outputfigure(type,pi1,g1,H1,D0,n,pibi1)
PQ1= paddedsize(size(pi1));

figure;
switch type
    case 'ideal'
       subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过理想频域低频滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('理想滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    case 'btw'
        subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过butterworth频域低频滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('butterworth滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    case 'gaussian'
       subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过高斯频域低频滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('高斯滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    otherwise 
        error('error');

end


clear;
pi1= imread('test1.pgm');
pi1=double(pi1);
PQ1= paddedsize(size(pi1));
% 对test1进行处理
d0=80;n=2;
H1=lpfilter('btw',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi1,H1);
outputfigure('btw',pi1,g1,H1,d0,n,pibi1);
saveas(gcf, '1.png');
H1=lpfilter('gaussian',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi1,H1);
outputfigure('gaussian',pi1,g1,H1,d0,n,pibi1);
saveas(gcf, '2.png');
clear;
pi2= imread('test2.tif');
d0=80;n=2;
% 对test2进行处理
pi2=double(pi2);
PQ1= paddedsize(size(pi2));
H1=lpfilter('btw',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi2,H1);
outputfigure('btw',pi2,g1,H1,d0,n,pibi1);
saveas(gcf, '3.png');
H1=lpfilter('gaussian',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi2,H1);
outputfigure('gaussian',pi2,g1,H1,d0,n,pibi1);
saveas(gcf, '4.png');

function H = hpfilter( type,M,N,D0,n )

HLP=lpfilter( type,M,N,D0,n );
H=1-HLP;

function outputfigurehp(type,pi1,g1,H1,D0,n,pibi1)
PQ1= paddedsize(size(pi1));

figure;
switch type
    case 'ideal'
       subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过理想频域高通滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('理想滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    case 'btw'
        subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过butterworth频域高通滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('butterworth滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    case 'gaussian'
       subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g1,[])
title(['经过高斯频域高通滤波图像D0=' ,num2str(D0),'n=',num2str(n)]);
subplot(2,2,3)
imshow(fftshift(H1))
title('高斯滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
    otherwise 
        error('error');

end
clear;
pi1= imread('test1.pgm');
pi1=double(pi1);
PQ1= paddedsize(size(pi1));
% 对test1进行处理
d0=80;n=2;
H1=hpfilter('btw',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi1,H1);
outputfigurehp('btw',pi1,g1,H1,d0,n,pibi1);
saveas(gcf, '5.png');
H1=hpfilter('gaussian',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi1,H1);
outputfigurehp('gaussian',pi1,g1,H1,d0,n,pibi1);
saveas(gcf, '6.png');
clear;
pi2= imread('test2.tif');
d0=80;n=2;
% 对test2进行处理
pi2=double(pi2);
PQ1= paddedsize(size(pi2));
H1=hpfilter('btw',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi2,H1);
outputfigurehp('btw',pi2,g1,H1,d0,n,pibi1);
saveas(gcf, '7.png');
H1=hpfilter('gaussian',PQ1(1),PQ1(2),d0,n);%创建函数lpfiltre butterworth 滤波器
[g1,pibi1]=dftfilt(pi2,H1);
outputfigurehp('gaussian',pi2,g1,H1,d0,n,pibi1);
saveas(gcf, '8.png');

pi1= imread('test3_corrupt.pgm');
% pi1=double(pi1);
PQ1= paddedsize(size(pi1));
[pi1,revertclass]=tofloat(pi1);
F=fft2(pi1,PQ1(1),PQ1(2));
[U, V] = dftuv(PQ1(1),PQ1(2));
D =hypot(U,V);
H=4.*1.*pi.^2.*D.^2;
H=1-H;
G=H.*F;
g=ifft2(G);
g=g(1:size(pi1,1),1:size(pi1,2));
i1=0;i2=0;
for u=1:size(pi1,1)
    for v=1:size(pi1,2)
        L1=(abs(G(u,v)))^2;
        i1=i1+L1;
        L2=(abs(F(u,v)))^2;
        i2=i2+L2;
    end
end

pibi1=L1/L2
figure;
subplot(2,2,1)
imshow(pi1,[])
title('原始图像');
subplot(2,2,2)
imshow(g,[])
title(['拉普拉斯高通滤波']);
subplot(2,2,3)
imshow(fftshift(H))
title('理想滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi1,PQ1(1),PQ1(2))))),[])
title(['功率谱比',num2str(pibi1)]);
saveas(gcf, '9.png');
figure;
D0=25;
pi2= imread('test4 copy.bmp');
% pi1=double(pi1);
PQ2= paddedsize(size(pi2));
[pi2,revertclass]=tofloat(pi2);
F=fft2(pi2,PQ2(1),PQ2(2));
[U, V] = dftuv(PQ2(1),PQ2(2));
D =hypot(U,V);
H=exp(-D.^2./(2*D0.^2));
H=1-H;
G=1+1*H.*F;
g2=ifft2(G);
g2=g2(1:size(pi2,1),1:size(pi2,2));
% g2=pi2-g2;
% g2=pi2+1*g2;
i1=0;i2=0;
for u=1:size(pi2,1)
    for v=1:size(pi2,2)
        L1=(abs(G(u,v)))^2;
        i1=i1+L1;
        L2=(abs(F(u,v)))^2;
        i2=i2+L2;
    end
end

pibi2=L1/L2

subplot(2,2,1)
imshow(pi2,[])
title('原始图像');
subplot(2,2,2)
imshow(g2,[])
title(['unmask高通滤波']);
subplot(2,2,3)
imshow(fftshift(H))
title('理想滤波器');
subplot(2,2,4)
imshow(log(1+abs(fftshift(fft2(pi2,PQ2(1),PQ2(2))))),[])

saveas(gcf, '10.png');



